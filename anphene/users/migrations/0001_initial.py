# Generated by Django 3.0.6 on 2020-07-14 06:02

import django.contrib.postgres.fields.citext
import django.core.serializers.json
import django.utils.timezone
from django.conf import settings
from django.contrib.postgres.operations import CITextExtension
from django.db import migrations, models

import anphene.users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("regions", "0002_add_fixtures"),
        ("auth", "0011_update_proxy_permissions"),
    ]

    operations = [
        CITextExtension(),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=255, verbose_name="Name of User"),
                ),
                ("id_card", models.ImageField(blank=True, upload_to="staff/id_card/")),
                ("balance", models.PositiveIntegerField(default=0)),
                (
                    "email",
                    django.contrib.postgres.fields.citext.CIEmailField(
                        max_length=254, unique=True
                    ),
                ),
                ("note", models.TextField(blank=True)),
            ],
            options={
                "permissions": (
                    ("manage_customers", "Manage customers"),
                    ("manage_staff", "Manage staff"),
                    ("manage_groups", "Manage groups"),
                ),
            },
        ),
        migrations.CreateModel(
            name="StaffNotificationRecipient",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "staff_email",
                    models.EmailField(blank=True, max_length=254, null=True, unique=True),
                ),
                ("active", models.BooleanField(default=True)),
                (
                    "user",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="staff_notification",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CustomerNote",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("date", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("content", models.TextField()),
                ("is_public", models.BooleanField(default=True)),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={"ordering": ("date",),},
        ),
        migrations.CreateModel(
            name="CustomerEvent",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("date", models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("ACCOUNT_CREATED", "account_created"),
                            ("PASSWORD_RESET_LINK_SENT", "password_reset_link_sent"),
                            ("PASSWORD_RESET", "password_reset"),
                            ("EMAIL_CHANGED_REQUEST", "email_changed_request"),
                            ("PASSWORD_CHANGED", "password_changed"),
                            ("EMAIL_CHANGED", "email_changed"),
                            ("PLACED_ORDER", "placed_order"),
                            ("NOTE_ADDED_TO_ORDER", "note_added_to_order"),
                            ("DIGITAL_LINK_DOWNLOADED", "digital_link_downloaded"),
                            ("CUSTOMER_DELETED", "customer_deleted"),
                            ("NAME_ASSIGNED", "name_assigned"),
                            ("EMAIL_ASSIGNED", "email_assigned"),
                            ("NOTE_ADDED", "note_added"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "parameters",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={"ordering": ("date",),},
        ),
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=256)),
                (
                    "phone",
                    anphene.users.models.PossiblePhoneNumberField(max_length=128, region=None),
                ),
                ("street_address", models.CharField(max_length=256)),
                ("postal_code", models.CharField(blank=True, max_length=20)),
                (
                    "sub_district",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="regions.SubDistrict"
                    ),
                ),
            ],
            options={"ordering": ["pk"],},
        ),
        migrations.AddField(
            model_name="user",
            name="addresses",
            field=models.ManyToManyField(
                blank=True, related_name="user_addresses", to="users.Address"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="default_shipping_address",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="users.Address",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Permission",
                verbose_name="user permissions",
            ),
        ),
    ]
